
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_server_asus_manager_adapter_glue_h__adaptor__H__
#define __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_server_asus_manager_adapter_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace skynet {
namespace asus {

class Manager_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.skynet.asus.Manager";

protected:
    Manager_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("health").onInterface(INTERFACE_NAME).withOutputParamNames("code").implementedAs([this](){ return this->health(); });
        object_.registerMethod("getCurrentActiveGPU").onInterface(INTERFACE_NAME).withOutputParamNames("index").implementedAs([this](){ return this->getCurrentActiveGPU(); });
        object_.registerMethod("toggleActiveGPU").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->toggleActiveGPU(); });
        object_.registerSignal("txStart").onInterface(INTERFACE_NAME).withParameters<std::string, std::string>("id", "info");
        object_.registerSignal("txEnd").onInterface(INTERFACE_NAME).withParameters<std::string, int32_t>("id", "code");
    }

    ~Manager_adaptor() = default;

public:
    void emitTxStart(const std::string& id, const std::string& info)
    {
        object_.emitSignal("txStart").onInterface(INTERFACE_NAME).withArguments(id, info);
    }

    void emitTxEnd(const std::string& id, const int32_t& code)
    {
        object_.emitSignal("txEnd").onInterface(INTERFACE_NAME).withArguments(id, code);
    }

private:
    virtual int32_t health() = 0;
    virtual int32_t getCurrentActiveGPU() = 0;
    virtual void toggleActiveGPU() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif

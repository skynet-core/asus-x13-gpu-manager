
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_server_systemd_client_glue_h__proxy__H__
#define __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_server_systemd_client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace DBus {

class Peer_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.DBus.Peer";

protected:
    Peer_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Peer_proxy() = default;

public:
    void Ping()
    {
        proxy_.callMethod("Ping").onInterface(INTERFACE_NAME);
    }

    std::string GetMachineId()
    {
        std::string result;
        proxy_.callMethod("GetMachineId").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

namespace org {
namespace freedesktop {
namespace DBus {

class Introspectable_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.DBus.Introspectable";

protected:
    Introspectable_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Introspectable_proxy() = default;

public:
    std::string Introspect()
    {
        std::string result;
        proxy_.callMethod("Introspect").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

namespace org {
namespace freedesktop {
namespace DBus {

class Properties_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.DBus.Properties";

protected:
    Properties_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("PropertiesChanged").onInterface(INTERFACE_NAME).call([this](const std::string& interface_name, const std::map<std::string, sdbus::Variant>& changed_properties, const std::vector<std::string>& invalidated_properties){ this->onPropertiesChanged(interface_name, changed_properties, invalidated_properties); });
    }

    ~Properties_proxy() = default;

    virtual void onPropertiesChanged(const std::string& interface_name, const std::map<std::string, sdbus::Variant>& changed_properties, const std::vector<std::string>& invalidated_properties) = 0;

public:
    sdbus::Variant Get(const std::string& interface_name, const std::string& property_name)
    {
        sdbus::Variant result;
        proxy_.callMethod("Get").onInterface(INTERFACE_NAME).withArguments(interface_name, property_name).storeResultsTo(result);
        return result;
    }

    std::map<std::string, sdbus::Variant> GetAll(const std::string& interface_name)
    {
        std::map<std::string, sdbus::Variant> result;
        proxy_.callMethod("GetAll").onInterface(INTERFACE_NAME).withArguments(interface_name).storeResultsTo(result);
        return result;
    }

    void Set(const std::string& interface_name, const std::string& property_name, const sdbus::Variant& value)
    {
        proxy_.callMethod("Set").onInterface(INTERFACE_NAME).withArguments(interface_name, property_name, value);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

namespace org {
namespace freedesktop {
namespace systemd1 {

class Manager_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.systemd1.Manager";

protected:
    Manager_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("UnitNew").onInterface(INTERFACE_NAME).call([this](const std::string& id, const sdbus::ObjectPath& unit){ this->onUnitNew(id, unit); });
        proxy_.uponSignal("UnitRemoved").onInterface(INTERFACE_NAME).call([this](const std::string& id, const sdbus::ObjectPath& unit){ this->onUnitRemoved(id, unit); });
        proxy_.uponSignal("JobNew").onInterface(INTERFACE_NAME).call([this](const uint32_t& id, const sdbus::ObjectPath& job, const std::string& unit){ this->onJobNew(id, job, unit); });
        proxy_.uponSignal("JobRemoved").onInterface(INTERFACE_NAME).call([this](const uint32_t& id, const sdbus::ObjectPath& job, const std::string& unit, const std::string& result){ this->onJobRemoved(id, job, unit, result); });
        proxy_.uponSignal("StartupFinished").onInterface(INTERFACE_NAME).call([this](const uint64_t& firmware, const uint64_t& loader, const uint64_t& kernel, const uint64_t& initrd, const uint64_t& userspace, const uint64_t& total){ this->onStartupFinished(firmware, loader, kernel, initrd, userspace, total); });
        proxy_.uponSignal("UnitFilesChanged").onInterface(INTERFACE_NAME).call([this](){ this->onUnitFilesChanged(); });
        proxy_.uponSignal("Reloading").onInterface(INTERFACE_NAME).call([this](const bool& active){ this->onReloading(active); });
    }

    ~Manager_proxy() = default;

    virtual void onUnitNew(const std::string& id, const sdbus::ObjectPath& unit) = 0;
    virtual void onUnitRemoved(const std::string& id, const sdbus::ObjectPath& unit) = 0;
    virtual void onJobNew(const uint32_t& id, const sdbus::ObjectPath& job, const std::string& unit) = 0;
    virtual void onJobRemoved(const uint32_t& id, const sdbus::ObjectPath& job, const std::string& unit, const std::string& result) = 0;
    virtual void onStartupFinished(const uint64_t& firmware, const uint64_t& loader, const uint64_t& kernel, const uint64_t& initrd, const uint64_t& userspace, const uint64_t& total) = 0;
    virtual void onUnitFilesChanged() = 0;
    virtual void onReloading(const bool& active) = 0;

public:
    sdbus::ObjectPath GetUnit(const std::string& name)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetUnit").onInterface(INTERFACE_NAME).withArguments(name).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath GetUnitByPID(const uint32_t& pid)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetUnitByPID").onInterface(INTERFACE_NAME).withArguments(pid).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath GetUnitByInvocationID(const std::vector<uint8_t>& invocation_id)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetUnitByInvocationID").onInterface(INTERFACE_NAME).withArguments(invocation_id).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath GetUnitByControlGroup(const std::string& cgroup)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetUnitByControlGroup").onInterface(INTERFACE_NAME).withArguments(cgroup).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath LoadUnit(const std::string& name)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("LoadUnit").onInterface(INTERFACE_NAME).withArguments(name).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath StartUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("StartUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath StartUnitWithFlags(const std::string& name, const std::string& mode, const uint64_t& flags)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("StartUnitWithFlags").onInterface(INTERFACE_NAME).withArguments(name, mode, flags).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath StartUnitReplace(const std::string& old_unit, const std::string& new_unit, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("StartUnitReplace").onInterface(INTERFACE_NAME).withArguments(old_unit, new_unit, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath StopUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("StopUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath ReloadUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("ReloadUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath RestartUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("RestartUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath TryRestartUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("TryRestartUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath ReloadOrRestartUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("ReloadOrRestartUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath ReloadOrTryRestartUnit(const std::string& name, const std::string& mode)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("ReloadOrTryRestartUnit").onInterface(INTERFACE_NAME).withArguments(name, mode).storeResultsTo(result);
        return result;
    }

    std::tuple<uint32_t, sdbus::ObjectPath, std::string, sdbus::ObjectPath, std::string, std::vector<sdbus::Struct<uint32_t, sdbus::ObjectPath, std::string, sdbus::ObjectPath, std::string>>> EnqueueUnitJob(const std::string& name, const std::string& job_type, const std::string& job_mode)
    {
        std::tuple<uint32_t, sdbus::ObjectPath, std::string, sdbus::ObjectPath, std::string, std::vector<sdbus::Struct<uint32_t, sdbus::ObjectPath, std::string, sdbus::ObjectPath, std::string>>> result;
        proxy_.callMethod("EnqueueUnitJob").onInterface(INTERFACE_NAME).withArguments(name, job_type, job_mode).storeResultsTo(result);
        return result;
    }

    void KillUnit(const std::string& name, const std::string& whom, const int32_t& signal)
    {
        proxy_.callMethod("KillUnit").onInterface(INTERFACE_NAME).withArguments(name, whom, signal);
    }

    void CleanUnit(const std::string& name, const std::vector<std::string>& mask)
    {
        proxy_.callMethod("CleanUnit").onInterface(INTERFACE_NAME).withArguments(name, mask);
    }

    void FreezeUnit(const std::string& name)
    {
        proxy_.callMethod("FreezeUnit").onInterface(INTERFACE_NAME).withArguments(name);
    }

    void ThawUnit(const std::string& name)
    {
        proxy_.callMethod("ThawUnit").onInterface(INTERFACE_NAME).withArguments(name);
    }

    void ResetFailedUnit(const std::string& name)
    {
        proxy_.callMethod("ResetFailedUnit").onInterface(INTERFACE_NAME).withArguments(name);
    }

    void SetUnitProperties(const std::string& name, const bool& runtime, const std::vector<sdbus::Struct<std::string, sdbus::Variant>>& properties)
    {
        proxy_.callMethod("SetUnitProperties").onInterface(INTERFACE_NAME).withArguments(name, runtime, properties);
    }

    void BindMountUnit(const std::string& name, const std::string& source, const std::string& destination, const bool& read_only, const bool& mkdir)
    {
        proxy_.callMethod("BindMountUnit").onInterface(INTERFACE_NAME).withArguments(name, source, destination, read_only, mkdir);
    }

    void MountImageUnit(const std::string& name, const std::string& source, const std::string& destination, const bool& read_only, const bool& mkdir, const std::vector<sdbus::Struct<std::string, std::string>>& options)
    {
        proxy_.callMethod("MountImageUnit").onInterface(INTERFACE_NAME).withArguments(name, source, destination, read_only, mkdir, options);
    }

    void RefUnit(const std::string& name)
    {
        proxy_.callMethod("RefUnit").onInterface(INTERFACE_NAME).withArguments(name);
    }

    void UnrefUnit(const std::string& name)
    {
        proxy_.callMethod("UnrefUnit").onInterface(INTERFACE_NAME).withArguments(name);
    }

    sdbus::ObjectPath StartTransientUnit(const std::string& name, const std::string& mode, const std::vector<sdbus::Struct<std::string, sdbus::Variant>>& properties, const std::vector<sdbus::Struct<std::string, std::vector<sdbus::Struct<std::string, sdbus::Variant>>>>& aux)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("StartTransientUnit").onInterface(INTERFACE_NAME).withArguments(name, mode, properties, aux).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, uint32_t, std::string>> GetUnitProcesses(const std::string& name)
    {
        std::vector<sdbus::Struct<std::string, uint32_t, std::string>> result;
        proxy_.callMethod("GetUnitProcesses").onInterface(INTERFACE_NAME).withArguments(name).storeResultsTo(result);
        return result;
    }

    void AttachProcessesToUnit(const std::string& unit_name, const std::string& subcgroup, const std::vector<uint32_t>& pids)
    {
        proxy_.callMethod("AttachProcessesToUnit").onInterface(INTERFACE_NAME).withArguments(unit_name, subcgroup, pids);
    }

    void AbandonScope(const std::string& name)
    {
        proxy_.callMethod("AbandonScope").onInterface(INTERFACE_NAME).withArguments(name);
    }

    sdbus::ObjectPath GetJob(const uint32_t& id)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetJob").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string, sdbus::ObjectPath, sdbus::ObjectPath>> GetJobAfter(const uint32_t& id)
    {
        std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string, sdbus::ObjectPath, sdbus::ObjectPath>> result;
        proxy_.callMethod("GetJobAfter").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string, sdbus::ObjectPath, sdbus::ObjectPath>> GetJobBefore(const uint32_t& id)
    {
        std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string, sdbus::ObjectPath, sdbus::ObjectPath>> result;
        proxy_.callMethod("GetJobBefore").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    void CancelJob(const uint32_t& id)
    {
        proxy_.callMethod("CancelJob").onInterface(INTERFACE_NAME).withArguments(id);
    }

    void ClearJobs()
    {
        proxy_.callMethod("ClearJobs").onInterface(INTERFACE_NAME);
    }

    void ResetFailed()
    {
        proxy_.callMethod("ResetFailed").onInterface(INTERFACE_NAME);
    }

    void SetShowStatus(const std::string& mode)
    {
        proxy_.callMethod("SetShowStatus").onInterface(INTERFACE_NAME).withArguments(mode);
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> ListUnits()
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> result;
        proxy_.callMethod("ListUnits").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> ListUnitsFiltered(const std::vector<std::string>& states)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> result;
        proxy_.callMethod("ListUnitsFiltered").onInterface(INTERFACE_NAME).withArguments(states).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> ListUnitsByPatterns(const std::vector<std::string>& states, const std::vector<std::string>& patterns)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> result;
        proxy_.callMethod("ListUnitsByPatterns").onInterface(INTERFACE_NAME).withArguments(states, patterns).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> ListUnitsByNames(const std::vector<std::string>& names)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string, std::string, std::string, std::string, sdbus::ObjectPath, uint32_t, std::string, sdbus::ObjectPath>> result;
        proxy_.callMethod("ListUnitsByNames").onInterface(INTERFACE_NAME).withArguments(names).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string, sdbus::ObjectPath, sdbus::ObjectPath>> ListJobs()
    {
        std::vector<sdbus::Struct<uint32_t, std::string, std::string, std::string, sdbus::ObjectPath, sdbus::ObjectPath>> result;
        proxy_.callMethod("ListJobs").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void Subscribe()
    {
        proxy_.callMethod("Subscribe").onInterface(INTERFACE_NAME);
    }

    void Unsubscribe()
    {
        proxy_.callMethod("Unsubscribe").onInterface(INTERFACE_NAME);
    }

    std::string Dump()
    {
        std::string result;
        proxy_.callMethod("Dump").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    sdbus::UnixFd DumpByFileDescriptor()
    {
        sdbus::UnixFd result;
        proxy_.callMethod("DumpByFileDescriptor").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void Reload()
    {
        proxy_.callMethod("Reload").onInterface(INTERFACE_NAME);
    }

    void Reexecute()
    {
        proxy_.callMethod("Reexecute").onInterface(INTERFACE_NAME).dontExpectReply();
    }

    void Exit()
    {
        proxy_.callMethod("Exit").onInterface(INTERFACE_NAME);
    }

    void Reboot()
    {
        proxy_.callMethod("Reboot").onInterface(INTERFACE_NAME);
    }

    void PowerOff()
    {
        proxy_.callMethod("PowerOff").onInterface(INTERFACE_NAME);
    }

    void Halt()
    {
        proxy_.callMethod("Halt").onInterface(INTERFACE_NAME);
    }

    void KExec()
    {
        proxy_.callMethod("KExec").onInterface(INTERFACE_NAME);
    }

    void SwitchRoot(const std::string& new_root, const std::string& init)
    {
        proxy_.callMethod("SwitchRoot").onInterface(INTERFACE_NAME).withArguments(new_root, init);
    }

    void SetEnvironment(const std::vector<std::string>& assignments)
    {
        proxy_.callMethod("SetEnvironment").onInterface(INTERFACE_NAME).withArguments(assignments);
    }

    void UnsetEnvironment(const std::vector<std::string>& names)
    {
        proxy_.callMethod("UnsetEnvironment").onInterface(INTERFACE_NAME).withArguments(names);
    }

    void UnsetAndSetEnvironment(const std::vector<std::string>& names, const std::vector<std::string>& assignments)
    {
        proxy_.callMethod("UnsetAndSetEnvironment").onInterface(INTERFACE_NAME).withArguments(names, assignments);
    }

    std::vector<sdbus::ObjectPath> EnqueueMarkedJobs()
    {
        std::vector<sdbus::ObjectPath> result;
        proxy_.callMethod("EnqueueMarkedJobs").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string>> ListUnitFiles()
    {
        std::vector<sdbus::Struct<std::string, std::string>> result;
        proxy_.callMethod("ListUnitFiles").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string>> ListUnitFilesByPatterns(const std::vector<std::string>& states, const std::vector<std::string>& patterns)
    {
        std::vector<sdbus::Struct<std::string, std::string>> result;
        proxy_.callMethod("ListUnitFilesByPatterns").onInterface(INTERFACE_NAME).withArguments(states, patterns).storeResultsTo(result);
        return result;
    }

    std::string GetUnitFileState(const std::string& file)
    {
        std::string result;
        proxy_.callMethod("GetUnitFileState").onInterface(INTERFACE_NAME).withArguments(file).storeResultsTo(result);
        return result;
    }

    std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> EnableUnitFiles(const std::vector<std::string>& files, const bool& runtime, const bool& force)
    {
        std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> result;
        proxy_.callMethod("EnableUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime, force).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> DisableUnitFiles(const std::vector<std::string>& files, const bool& runtime)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("DisableUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime).storeResultsTo(result);
        return result;
    }

    std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> EnableUnitFilesWithFlags(const std::vector<std::string>& files, const uint64_t& flags)
    {
        std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> result;
        proxy_.callMethod("EnableUnitFilesWithFlags").onInterface(INTERFACE_NAME).withArguments(files, flags).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> DisableUnitFilesWithFlags(const std::vector<std::string>& files, const uint64_t& flags)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("DisableUnitFilesWithFlags").onInterface(INTERFACE_NAME).withArguments(files, flags).storeResultsTo(result);
        return result;
    }

    std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> ReenableUnitFiles(const std::vector<std::string>& files, const bool& runtime, const bool& force)
    {
        std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> result;
        proxy_.callMethod("ReenableUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime, force).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> LinkUnitFiles(const std::vector<std::string>& files, const bool& runtime, const bool& force)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("LinkUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime, force).storeResultsTo(result);
        return result;
    }

    std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> PresetUnitFiles(const std::vector<std::string>& files, const bool& runtime, const bool& force)
    {
        std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> result;
        proxy_.callMethod("PresetUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime, force).storeResultsTo(result);
        return result;
    }

    std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> PresetUnitFilesWithMode(const std::vector<std::string>& files, const std::string& mode, const bool& runtime, const bool& force)
    {
        std::tuple<bool, std::vector<sdbus::Struct<std::string, std::string, std::string>>> result;
        proxy_.callMethod("PresetUnitFilesWithMode").onInterface(INTERFACE_NAME).withArguments(files, mode, runtime, force).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> MaskUnitFiles(const std::vector<std::string>& files, const bool& runtime, const bool& force)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("MaskUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime, force).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> UnmaskUnitFiles(const std::vector<std::string>& files, const bool& runtime)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("UnmaskUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, runtime).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> RevertUnitFiles(const std::vector<std::string>& files)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("RevertUnitFiles").onInterface(INTERFACE_NAME).withArguments(files).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> SetDefaultTarget(const std::string& name, const bool& force)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("SetDefaultTarget").onInterface(INTERFACE_NAME).withArguments(name, force).storeResultsTo(result);
        return result;
    }

    std::string GetDefaultTarget()
    {
        std::string result;
        proxy_.callMethod("GetDefaultTarget").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> PresetAllUnitFiles(const std::string& mode, const bool& runtime, const bool& force)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("PresetAllUnitFiles").onInterface(INTERFACE_NAME).withArguments(mode, runtime, force).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::string, std::string>> AddDependencyUnitFiles(const std::vector<std::string>& files, const std::string& target, const std::string& type, const bool& runtime, const bool& force)
    {
        std::vector<sdbus::Struct<std::string, std::string, std::string>> result;
        proxy_.callMethod("AddDependencyUnitFiles").onInterface(INTERFACE_NAME).withArguments(files, target, type, runtime, force).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> GetUnitFileLinks(const std::string& name, const bool& runtime)
    {
        std::vector<std::string> result;
        proxy_.callMethod("GetUnitFileLinks").onInterface(INTERFACE_NAME).withArguments(name, runtime).storeResultsTo(result);
        return result;
    }

    void SetExitCode(const uint8_t& number)
    {
        proxy_.callMethod("SetExitCode").onInterface(INTERFACE_NAME).withArguments(number);
    }

    uint32_t LookupDynamicUserByName(const std::string& name)
    {
        uint32_t result;
        proxy_.callMethod("LookupDynamicUserByName").onInterface(INTERFACE_NAME).withArguments(name).storeResultsTo(result);
        return result;
    }

    std::string LookupDynamicUserByUID(const uint32_t& uid)
    {
        std::string result;
        proxy_.callMethod("LookupDynamicUserByUID").onInterface(INTERFACE_NAME).withArguments(uid).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<uint32_t, std::string>> GetDynamicUsers()
    {
        std::vector<sdbus::Struct<uint32_t, std::string>> result;
        proxy_.callMethod("GetDynamicUsers").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

public:
    std::string Version()
    {
        return proxy_.getProperty("Version").onInterface(INTERFACE_NAME);
    }

    std::string Features()
    {
        return proxy_.getProperty("Features").onInterface(INTERFACE_NAME);
    }

    std::string Virtualization()
    {
        return proxy_.getProperty("Virtualization").onInterface(INTERFACE_NAME);
    }

    std::string Architecture()
    {
        return proxy_.getProperty("Architecture").onInterface(INTERFACE_NAME);
    }

    std::string Tainted()
    {
        return proxy_.getProperty("Tainted").onInterface(INTERFACE_NAME);
    }

    uint64_t FirmwareTimestamp()
    {
        return proxy_.getProperty("FirmwareTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t FirmwareTimestampMonotonic()
    {
        return proxy_.getProperty("FirmwareTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t LoaderTimestamp()
    {
        return proxy_.getProperty("LoaderTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t LoaderTimestampMonotonic()
    {
        return proxy_.getProperty("LoaderTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t KernelTimestamp()
    {
        return proxy_.getProperty("KernelTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t KernelTimestampMonotonic()
    {
        return proxy_.getProperty("KernelTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDTimestamp()
    {
        return proxy_.getProperty("InitRDTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t UserspaceTimestamp()
    {
        return proxy_.getProperty("UserspaceTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t UserspaceTimestampMonotonic()
    {
        return proxy_.getProperty("UserspaceTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t FinishTimestamp()
    {
        return proxy_.getProperty("FinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t FinishTimestampMonotonic()
    {
        return proxy_.getProperty("FinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t SecurityStartTimestamp()
    {
        return proxy_.getProperty("SecurityStartTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t SecurityStartTimestampMonotonic()
    {
        return proxy_.getProperty("SecurityStartTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t SecurityFinishTimestamp()
    {
        return proxy_.getProperty("SecurityFinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t SecurityFinishTimestampMonotonic()
    {
        return proxy_.getProperty("SecurityFinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t GeneratorsStartTimestamp()
    {
        return proxy_.getProperty("GeneratorsStartTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t GeneratorsStartTimestampMonotonic()
    {
        return proxy_.getProperty("GeneratorsStartTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t GeneratorsFinishTimestamp()
    {
        return proxy_.getProperty("GeneratorsFinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t GeneratorsFinishTimestampMonotonic()
    {
        return proxy_.getProperty("GeneratorsFinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t UnitsLoadStartTimestamp()
    {
        return proxy_.getProperty("UnitsLoadStartTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t UnitsLoadStartTimestampMonotonic()
    {
        return proxy_.getProperty("UnitsLoadStartTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t UnitsLoadFinishTimestamp()
    {
        return proxy_.getProperty("UnitsLoadFinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t UnitsLoadFinishTimestampMonotonic()
    {
        return proxy_.getProperty("UnitsLoadFinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t UnitsLoadTimestamp()
    {
        return proxy_.getProperty("UnitsLoadTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t UnitsLoadTimestampMonotonic()
    {
        return proxy_.getProperty("UnitsLoadTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDSecurityStartTimestamp()
    {
        return proxy_.getProperty("InitRDSecurityStartTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDSecurityStartTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDSecurityStartTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDSecurityFinishTimestamp()
    {
        return proxy_.getProperty("InitRDSecurityFinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDSecurityFinishTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDSecurityFinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDGeneratorsStartTimestamp()
    {
        return proxy_.getProperty("InitRDGeneratorsStartTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDGeneratorsStartTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDGeneratorsStartTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDGeneratorsFinishTimestamp()
    {
        return proxy_.getProperty("InitRDGeneratorsFinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDGeneratorsFinishTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDGeneratorsFinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDUnitsLoadStartTimestamp()
    {
        return proxy_.getProperty("InitRDUnitsLoadStartTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDUnitsLoadStartTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDUnitsLoadStartTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDUnitsLoadFinishTimestamp()
    {
        return proxy_.getProperty("InitRDUnitsLoadFinishTimestamp").onInterface(INTERFACE_NAME);
    }

    uint64_t InitRDUnitsLoadFinishTimestampMonotonic()
    {
        return proxy_.getProperty("InitRDUnitsLoadFinishTimestampMonotonic").onInterface(INTERFACE_NAME);
    }

    std::string LogLevel()
    {
        return proxy_.getProperty("LogLevel").onInterface(INTERFACE_NAME);
    }

    void LogLevel(const std::string& value)
    {
        proxy_.setProperty("LogLevel").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::string LogTarget()
    {
        return proxy_.getProperty("LogTarget").onInterface(INTERFACE_NAME);
    }

    void LogTarget(const std::string& value)
    {
        proxy_.setProperty("LogTarget").onInterface(INTERFACE_NAME).toValue(value);
    }

    uint32_t NNames()
    {
        return proxy_.getProperty("NNames").onInterface(INTERFACE_NAME);
    }

    uint32_t NFailedUnits()
    {
        return proxy_.getProperty("NFailedUnits").onInterface(INTERFACE_NAME);
    }

    uint32_t NJobs()
    {
        return proxy_.getProperty("NJobs").onInterface(INTERFACE_NAME);
    }

    uint32_t NInstalledJobs()
    {
        return proxy_.getProperty("NInstalledJobs").onInterface(INTERFACE_NAME);
    }

    uint32_t NFailedJobs()
    {
        return proxy_.getProperty("NFailedJobs").onInterface(INTERFACE_NAME);
    }

    double Progress()
    {
        return proxy_.getProperty("Progress").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> Environment()
    {
        return proxy_.getProperty("Environment").onInterface(INTERFACE_NAME);
    }

    bool ConfirmSpawn()
    {
        return proxy_.getProperty("ConfirmSpawn").onInterface(INTERFACE_NAME);
    }

    bool ShowStatus()
    {
        return proxy_.getProperty("ShowStatus").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> UnitPath()
    {
        return proxy_.getProperty("UnitPath").onInterface(INTERFACE_NAME);
    }

    std::string DefaultStandardOutput()
    {
        return proxy_.getProperty("DefaultStandardOutput").onInterface(INTERFACE_NAME);
    }

    std::string DefaultStandardError()
    {
        return proxy_.getProperty("DefaultStandardError").onInterface(INTERFACE_NAME);
    }

    uint64_t RuntimeWatchdogUSec()
    {
        return proxy_.getProperty("RuntimeWatchdogUSec").onInterface(INTERFACE_NAME);
    }

    void RuntimeWatchdogUSec(const uint64_t& value)
    {
        proxy_.setProperty("RuntimeWatchdogUSec").onInterface(INTERFACE_NAME).toValue(value);
    }

    uint64_t RuntimeWatchdogPreUSec()
    {
        return proxy_.getProperty("RuntimeWatchdogPreUSec").onInterface(INTERFACE_NAME);
    }

    void RuntimeWatchdogPreUSec(const uint64_t& value)
    {
        proxy_.setProperty("RuntimeWatchdogPreUSec").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::string RuntimeWatchdogPreGovernor()
    {
        return proxy_.getProperty("RuntimeWatchdogPreGovernor").onInterface(INTERFACE_NAME);
    }

    void RuntimeWatchdogPreGovernor(const std::string& value)
    {
        proxy_.setProperty("RuntimeWatchdogPreGovernor").onInterface(INTERFACE_NAME).toValue(value);
    }

    uint64_t RebootWatchdogUSec()
    {
        return proxy_.getProperty("RebootWatchdogUSec").onInterface(INTERFACE_NAME);
    }

    void RebootWatchdogUSec(const uint64_t& value)
    {
        proxy_.setProperty("RebootWatchdogUSec").onInterface(INTERFACE_NAME).toValue(value);
    }

    uint64_t KExecWatchdogUSec()
    {
        return proxy_.getProperty("KExecWatchdogUSec").onInterface(INTERFACE_NAME);
    }

    void KExecWatchdogUSec(const uint64_t& value)
    {
        proxy_.setProperty("KExecWatchdogUSec").onInterface(INTERFACE_NAME).toValue(value);
    }

    bool ServiceWatchdogs()
    {
        return proxy_.getProperty("ServiceWatchdogs").onInterface(INTERFACE_NAME);
    }

    void ServiceWatchdogs(const bool& value)
    {
        proxy_.setProperty("ServiceWatchdogs").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::string ControlGroup()
    {
        return proxy_.getProperty("ControlGroup").onInterface(INTERFACE_NAME);
    }

    std::string SystemState()
    {
        return proxy_.getProperty("SystemState").onInterface(INTERFACE_NAME);
    }

    uint8_t ExitCode()
    {
        return proxy_.getProperty("ExitCode").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultTimerAccuracyUSec()
    {
        return proxy_.getProperty("DefaultTimerAccuracyUSec").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultTimeoutStartUSec()
    {
        return proxy_.getProperty("DefaultTimeoutStartUSec").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultTimeoutStopUSec()
    {
        return proxy_.getProperty("DefaultTimeoutStopUSec").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultTimeoutAbortUSec()
    {
        return proxy_.getProperty("DefaultTimeoutAbortUSec").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultRestartUSec()
    {
        return proxy_.getProperty("DefaultRestartUSec").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultStartLimitIntervalUSec()
    {
        return proxy_.getProperty("DefaultStartLimitIntervalUSec").onInterface(INTERFACE_NAME);
    }

    uint32_t DefaultStartLimitBurst()
    {
        return proxy_.getProperty("DefaultStartLimitBurst").onInterface(INTERFACE_NAME);
    }

    bool DefaultCPUAccounting()
    {
        return proxy_.getProperty("DefaultCPUAccounting").onInterface(INTERFACE_NAME);
    }

    bool DefaultBlockIOAccounting()
    {
        return proxy_.getProperty("DefaultBlockIOAccounting").onInterface(INTERFACE_NAME);
    }

    bool DefaultMemoryAccounting()
    {
        return proxy_.getProperty("DefaultMemoryAccounting").onInterface(INTERFACE_NAME);
    }

    bool DefaultTasksAccounting()
    {
        return proxy_.getProperty("DefaultTasksAccounting").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitCPU()
    {
        return proxy_.getProperty("DefaultLimitCPU").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitCPUSoft()
    {
        return proxy_.getProperty("DefaultLimitCPUSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitFSIZE()
    {
        return proxy_.getProperty("DefaultLimitFSIZE").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitFSIZESoft()
    {
        return proxy_.getProperty("DefaultLimitFSIZESoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitDATA()
    {
        return proxy_.getProperty("DefaultLimitDATA").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitDATASoft()
    {
        return proxy_.getProperty("DefaultLimitDATASoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitSTACK()
    {
        return proxy_.getProperty("DefaultLimitSTACK").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitSTACKSoft()
    {
        return proxy_.getProperty("DefaultLimitSTACKSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitCORE()
    {
        return proxy_.getProperty("DefaultLimitCORE").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitCORESoft()
    {
        return proxy_.getProperty("DefaultLimitCORESoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitRSS()
    {
        return proxy_.getProperty("DefaultLimitRSS").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitRSSSoft()
    {
        return proxy_.getProperty("DefaultLimitRSSSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitNOFILE()
    {
        return proxy_.getProperty("DefaultLimitNOFILE").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitNOFILESoft()
    {
        return proxy_.getProperty("DefaultLimitNOFILESoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitAS()
    {
        return proxy_.getProperty("DefaultLimitAS").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitASSoft()
    {
        return proxy_.getProperty("DefaultLimitASSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitNPROC()
    {
        return proxy_.getProperty("DefaultLimitNPROC").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitNPROCSoft()
    {
        return proxy_.getProperty("DefaultLimitNPROCSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitMEMLOCK()
    {
        return proxy_.getProperty("DefaultLimitMEMLOCK").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitMEMLOCKSoft()
    {
        return proxy_.getProperty("DefaultLimitMEMLOCKSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitLOCKS()
    {
        return proxy_.getProperty("DefaultLimitLOCKS").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitLOCKSSoft()
    {
        return proxy_.getProperty("DefaultLimitLOCKSSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitSIGPENDING()
    {
        return proxy_.getProperty("DefaultLimitSIGPENDING").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitSIGPENDINGSoft()
    {
        return proxy_.getProperty("DefaultLimitSIGPENDINGSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitMSGQUEUE()
    {
        return proxy_.getProperty("DefaultLimitMSGQUEUE").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitMSGQUEUESoft()
    {
        return proxy_.getProperty("DefaultLimitMSGQUEUESoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitNICE()
    {
        return proxy_.getProperty("DefaultLimitNICE").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitNICESoft()
    {
        return proxy_.getProperty("DefaultLimitNICESoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitRTPRIO()
    {
        return proxy_.getProperty("DefaultLimitRTPRIO").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitRTPRIOSoft()
    {
        return proxy_.getProperty("DefaultLimitRTPRIOSoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitRTTIME()
    {
        return proxy_.getProperty("DefaultLimitRTTIME").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultLimitRTTIMESoft()
    {
        return proxy_.getProperty("DefaultLimitRTTIMESoft").onInterface(INTERFACE_NAME);
    }

    uint64_t DefaultTasksMax()
    {
        return proxy_.getProperty("DefaultTasksMax").onInterface(INTERFACE_NAME);
    }

    uint64_t TimerSlackNSec()
    {
        return proxy_.getProperty("TimerSlackNSec").onInterface(INTERFACE_NAME);
    }

    std::string DefaultOOMPolicy()
    {
        return proxy_.getProperty("DefaultOOMPolicy").onInterface(INTERFACE_NAME);
    }

    int32_t DefaultOOMScoreAdjust()
    {
        return proxy_.getProperty("DefaultOOMScoreAdjust").onInterface(INTERFACE_NAME);
    }

    std::string CtrlAltDelBurstAction()
    {
        return proxy_.getProperty("CtrlAltDelBurstAction").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif

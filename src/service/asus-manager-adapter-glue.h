
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_service_asus_manager_adapter_glue_h__adaptor__H__
#define __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_service_asus_manager_adapter_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace skynet {
namespace asus {

class Manager_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.skynet.asus.Manager";

protected:
    Manager_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("getCurrentMode").onInterface(INTERFACE_NAME).withOutputParamNames("mode", "name").implementedAs([this](){ return this->getCurrentMode(); });
        object_.registerMethod("setIntegrated").onInterface(INTERFACE_NAME).withOutputParamNames("result", "message").implementedAs([this](){ return this->setIntegrated(); });
        object_.registerMethod("setHybrid").onInterface(INTERFACE_NAME).withOutputParamNames("result", "message").implementedAs([this](){ return this->setHybrid(); });
        object_.registerMethod("setXMobile").onInterface(INTERFACE_NAME).withOutputParamNames("result", "message").implementedAs([this](){ return this->setXMobile(); });
        object_.registerSignal("restartPrompt").onInterface(INTERFACE_NAME).withParameters<std::string>("message");
    }

    ~Manager_adaptor() = default;

public:
    void emitRestartPrompt(const std::string& message)
    {
        object_.emitSignal("restartPrompt").onInterface(INTERFACE_NAME).withArguments(message);
    }

private:
    virtual std::tuple<int32_t, std::string> getCurrentMode() = 0;
    virtual std::tuple<int32_t, std::string> setIntegrated() = 0;
    virtual std::tuple<int32_t, std::string> setHybrid() = 0;
    virtual std::tuple<int32_t, std::string> setXMobile() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif


/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_client_asus_manager_proxy_glue_h__proxy__H__
#define __sdbuscpp___home_skynet_Dev_tools_egpu_x13_src_client_asus_manager_proxy_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace skynet {
namespace asus {

class Manager_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.skynet.asus.Manager";

protected:
    Manager_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("txStart").onInterface(INTERFACE_NAME).call([this](const std::string& id, const std::string& info){ this->onTxStart(id, info); });
        proxy_.uponSignal("txEnd").onInterface(INTERFACE_NAME).call([this](const std::string& id, const int32_t& code){ this->onTxEnd(id, code); });
    }

    ~Manager_proxy() = default;

    virtual void onTxStart(const std::string& id, const std::string& info) = 0;
    virtual void onTxEnd(const std::string& id, const int32_t& code) = 0;

public:
    int32_t health()
    {
        int32_t result;
        proxy_.callMethod("health").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    int32_t getCurrentActiveGPU()
    {
        int32_t result;
        proxy_.callMethod("getCurrentActiveGPU").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void toggleActiveGPU()
    {
        proxy_.callMethod("toggleActiveGPU").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
